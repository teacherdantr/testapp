// This file will be auto-generated by Supabase CLI when you generate types from your database schema.
// For now, we'll put a placeholder.
//
// Example: supabase gen types typescript --project-id YOUR_PROJECT_ID > src/lib/supabase/database.types.ts
// Or you can generate them from the Supabase dashboard SQL editor:
// 1. Go to SQL Editor page
// 2. Click "+ New query" or open an existing one
// 3. Paste the SQL query from https://supabase.com/docs/guides/database/api/generating-types
// 4. Run the query
// 5. Copy the output and paste it into this file.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      // Placeholder - you will define your tables in Supabase and then generate types
      // Example:
      // tests: {
      //   Row: {
      //     id: string
      //     created_at: string
      //     title: string
      //     description: string | null
      //     // ... other fields
      //   }
      //   Insert: {
      //     id?: string
      //     created_at?: string
      //     title: string
      //     description?: string | null
      //     // ... other fields
      //   }
      //   Update: {
      //     id?: string
      //     created_at?: string
      //     title?: string
      //     description?: string | null
      //     // ... other fields
      //   }
      //   Relationships: []
      // }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// Helper types for cleaner usage (optional, but can be nice)
// export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']
// export type Enums<T extends keyof Database['public']['Enums']> = Database['public']['Enums'][T]
// export type Functions<T extends keyof Database['public']['Functions']> = Database['public']['Functions'][T]
